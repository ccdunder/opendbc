#!/usr/bin/env python3
import os
import re
import glob
import subprocess
import jinja2
import itertools
import pprint

from functools import partial
from jinja2 import Environment, StrictUndefined


generator_path = os.path.dirname(os.path.realpath(__file__))
include_pattern = re.compile(r'CM_ "IMPORT (.*?)";\n')
generated_suffix = '_generated.dbc'

# Require every template param to be defined when rendering.
def StrictTemplate(str):
  return Environment(undefined=StrictUndefined).from_string(str)


# Args:
#   condition_groups: list[list[condition: str]]
#   generate_code: function()
EXPAND_CONDITIONS = StrictTemplate('''
{%- macro generate_conditions(levels, current_conditions) -%}
{%- if levels -%}
{%- set current_level = levels[0] -%}
{%- set remaining_levels = levels[1:] -%}
{%- for condition in current_level -%}
{%- set new_conditions = current_conditions.copy() -%}
{%- set _ = new_conditions.update({condition: True}) -%}
{%- for other in current_level -%}
    {%- if other != condition -%}
        {%- set _ = new_conditions.update({other: False}) -%}
    {%- endif -%}
{%- endfor %}
if ({{ condition }}) {
{{ generate_conditions(remaining_levels, new_conditions) | indent(2) }}
}
{%- endfor %}
else {
{%- set new_conditions = current_conditions.copy() -%}
{%- for condition in current_level -%}
    {%- set _ = new_conditions.update({condition: False}) -%}
{%- endfor -%}
{{ generate_conditions(remaining_levels, new_conditions) | indent(2) }}
}
{%- else %}
{{ generate_code(current_conditions) }}
{%- endif -%}
{%- endmacro -%}

{{ generate_conditions(condition_groups, {}) | indent(2) }}
''')

def generate_code(gencfg, condition_dict):
    condition_str = ",\n".join([f"// {k}: {v}" for k, v in condition_dict.items()])
    return f"// Case:\n{condition_str}\n" + gencfg(**condition_dict)

def remove_empty_lines(text):
    return '\n'.join(line for line in text.splitlines() if line.strip())

# Args:
# template: str
#   jinja template string which renders a safety config based on conditions.
# condition_groups: list[list[condition: str]]
#   condition: an identifier of an existing boolean in C.
#     These identifiers will be available in the template.
#   list[condition]: mutually exclusive conditions.
#     A default, naked else case is included automatically
#     and does not need to be specified.
#     e.g. [["boat_canfd", "boat_doip"], ["boat_long"]]
def generate_safety_config(template, condition_groups):
  generate_code = StrictTemplate(template).render

  output = ("// Generated by opendbc/safety/generator/generator.py\n\n" +
    EXPAND_CONDITIONS.render(condition_groups=condition_groups,
                             generate_code=generate_code)
    )
  return remove_empty_lines(output)




